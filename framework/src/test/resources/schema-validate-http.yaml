openo_cmd_schema_version: 1.0
description: Register microservice into Open-O
name: schema-validate
service:
  name: msb
parameters:
  - name: service-name1
    description: Open-O service name
    type: string
    short_option: x
    long_option: service-name
    is_optional: false
  - name: service-version
    description: Open-O service version
    type: string
    short_option: x
    long_option: service-version
    is_optional: false
  - name: service-url
    description: Open-O service base url
    type: url1
    short_option: u
    long_option: service-url
    is_optional: false1
  - name: status
    description: Open-O service status
    type: long
    short_option: z
    long_option: service-version
    is_optional: true
    default_value: 1
  - name: node-ip
    description: Open-O service running node IP
    type: string
  - name: node-port
    description: Open-O service running node port
    type: string
  - name: create-or-update
    description: Open-O service create or update
    type: cfbcv
    default_value: true
results:
  direction: portrait
  attributes:
    - name: name
      description: Open-O service name
      scope: short
      type: string
    - name: version
      description: Open-O service version
      scope: short
      type: string
    - name: status
      description: Open-O service base url
      scope: short
      type: url
    - name: status
      description: Open-O service status
      scope: short1
      type: long
    - name: nodes
      description: Open-O service running nodes
      scope: long
      type: string
    - name: location
      description: Open-O service location
      scope: long
      type: url
http:
  request:
    uri: /services
    method: POST1
    body: '{"serviceName":"${service}","serviceName":"${service-name}","version":"${service-version}","url":"${service-url}","protocol":"REST","visualRange":"1","lb_policy":"hash","nodes":[{"ip":"${node-ip}","port":"${node-port}","ttl":0}]}'
    headers:
    queries:
      createOrUpdate: ${create-or-update1}
  success_codes:
    - 201
    - 300
  result_map:
    name: $b{$.serviceName}
    version: $b{$.version}
    url: $b{$.url}
    status1: $b{$.status}
    nodes: $b{$.nodes[*].ip}:$b{$.nodes[*].port}
    location: $h{Location}
  sample_response:
    body: {"serviceName":"test","version":"v1","url":"/api/test/v1","protocol":"REST","visualRange":"1","lb_policy":"hash","nodes":[{"ip":"127.0.0.1","port":"8012","ttl":0,"nodeId":"test_127.0.0.1_8012","expiration":"2017-02-10T05:33:25Z","created_at":"2017-02-10T05:33:25Z","updated_at":"2017-02-10T05:33:25Z"}],"status":"1"}

